-- WITH 절 공통 GNT 정보 정의
WITH DAY_GNT AS (
  SELECT
    TG.ENTER_CD,
    TG.SABUN,
    TG.YMD,
    LISTAGG(TG.GNT_CD, ',') WITHIN GROUP (ORDER BY TG.GNT_CD) AS GNT_LIST,
    MAX(T014.REQUEST_USE_TYPE) KEEP (DENSE_RANK FIRST ORDER BY TG.GNT_CD) AS REQUEST_USE_TYPE
  FROM TTIM405 TG
  JOIN THRI103 T103 
    ON TG.ENTER_CD = T103.ENTER_CD AND TG.APPL_SEQ = T103.APPL_SEQ
  LEFT JOIN TTIM014 T014 
    ON TG.ENTER_CD = T014.ENTER_CD AND TG.GNT_CD = T014.GNT_CD
  WHERE NVL(TG.UPDATE_YN, 'N') = 'N'
    AND T103.APPL_STATUS_CD = '99'
  GROUP BY TG.ENTER_CD, TG.SABUN, TG.YMD
),

TODAY_HM AS (
  SELECT
    A.ENTER_CD,
    A.SABUN,
    A.YMD,
    A.ORG_CD,
    A.WORK_ORG_CD,
    A.DAY_NM,
    A.WORK_YN AS HOL_YN,
    A.WORK_ORG_NM,
    NVL(A.WORK_MIN,0) AS WORK_MIN,
    A.ACT_IN_HM,
    NVL(DG.REQUEST_USE_TYPE, '-') AS REQUEST_USE_TYPE,
    NVL(DG.GNT_LIST, '') AS GNT_CD,
    CASE
      WHEN DG.GNT_LIST = '88' THEN A.WORK_SHM
      WHEN DG.GNT_LIST IS NOT NULL AND DG.GNT_LIST NOT IN ('15','16','135','136') THEN '-'
      WHEN A.TIME_CD IS NULL THEN '-'
      WHEN A.WORK_YN = 'N' THEN CASE WHEN DG.REQUEST_USE_TYPE = 'AM' THEN A.HALF_HOLIDAY1 ELSE A.WORK_SHM END
      WHEN A.WORK_YN = 'Y' AND A.SHM IS NOT NULL AND A.EHM IS NOT NULL THEN A.SHM
      ELSE '-'
    END AS WORK_SHM,
    CASE
      WHEN DG.GNT_LIST = '88' THEN A.WORK_EHM
      WHEN DG.GNT_LIST IS NOT NULL AND DG.GNT_LIST NOT IN ('15','16','135','136') THEN '-'
      WHEN A.TIME_CD IS NULL THEN '-'
      WHEN A.WORK_YN = 'N' THEN CASE WHEN DG.REQUEST_USE_TYPE = 'PM' THEN NVL(A.HALF_HOLIDAY1, A.WORK_EHM) ELSE A.WORK_EHM END
      WHEN A.WORK_YN = 'Y' AND A.SHM IS NOT NULL AND A.EHM IS NOT NULL THEN A.EHM
      ELSE '-'
    END AS WORK_EHM_TODAY
  FROM (
    -- 복잡한 서브쿼리 생략 없이 사용자가 제공한 전체 SELECT 내부 FROM 절을 여기에 위치시키면 됨
    --SELECT ... -- 사용자 제공 내용 생략된 부분을 그대로 삽입
SELECT A.ENTER_CD,A.SABUN,A.YMD,A.ORG_CD,A.WORK_ORG_CD,A.WORK_ORG_NM,C.WORK_YN,C.SHM,C.EHM,D.HALF_HOLIDAY1,D.HALF_HOLIDAY2,A.DAY_NM,T.WORK_MIN,X.IN_HM AS ACT_IN_HM
,CASE WHEN (F_TIM_GET_DAY_GNT_CD(A.ENTER_CD, A.SABUN, A.YMD) IS NOT NULL
AND (SELECT X.REQUEST_USE_TYPE FROM TTIM014 X
WHERE X.ENTER_CD = A.ENTER_CD AND X.GNT_CD = F_TIM_GET_DAY_GNT_CD(A.ENTER_CD, A.SABUN, A.YMD)) NOT IN ('AM','PM')
) OR F_TIM_GET_STATUS_CD(A.ENTER_CD,A.SABUN,A.YMD) IN ('CA', 'EA') THEN  '' ELSE NVL(C.STIME_CD, C.TIME_CD) END AS TIME_CD
,F_TIM_GET_DAY_GNT_CD(A.ENTER_CD, A.SABUN, A.YMD) AS GNT_CD
,(SELECT X.REQUEST_USE_TYPE FROM TTIM014 X WHERE X.ENTER_CD = A.ENTER_CD AND X.GNT_CD = F_TIM_GET_DAY_GNT_CD(A.ENTER_CD, A.SABUN, A.YMD)) AS REQUEST_USE_TYPE
,CASE WHEN E.ENTER_CD IS NOT NULL
THEN TO_CHAR(TO_DATE(D.WORK_SHM2, 'HH24MI') + NVL(E.DECRE_SM, 0) / 24 / 60, 'HH24MI')
ELSE NVL(C.SHM, D.WORK_SHM2)
END AS WORK_SHM
,CASE WHEN E.ENTER_CD IS NOT NULL
THEN TO_CHAR(TO_DATE(D.WORK_EHM2, 'HH24MI') - NVL(E.DECRE_EM, 0) / 24 / 60, 'HH24MI')
ELSE NVL(C.EHM, D.WORK_EHM2)
END AS WORK_EHM
FROM(SELECT A1.ENTER_CD,A1.SABUN,A1.NAME,A2.DAY_NM,B.SDATE,C.ORG_CD,C.WORK_ORG_NM,C.WORK_ORG_CD
,A2.SUN_DATE AS YMD
FROM THRM100 A1, THRM151 B, TSYS007 A2, TTIM111_V C
WHERE 1 = 1
AND A1.ENTER_CD = C.ENTER_CD (+)
AND A1.SABUN    = C.SABUN (+)
AND A2.SUN_DATE BETWEEN C.SDATE AND NVL(C.EDATE, '99991231')
AND A2.SUN_DATE BETWEEN REPLACE(TRIM('2025-05-01'), '-', '') AND REPLACE(TRIM('2025-05-07'), '-', '')
AND A1.ENTER_CD = 'KS'
AND A1.ENTER_CD = B.ENTER_CD
AND A1.SABUN = B.SABUN
AND B.SDATE = ( SELECT MAX(BB.SDATE)
FROM THRM151 BB
WHERE BB.ENTER_CD = B.ENTER_CD
AND BB.SABUN    = B.SABUN
AND A2.SUN_DATE BETWEEN BB.SDATE AND NVL(BB.EDATE, '99991231') )
  ) A
  LEFT JOIN DAY_GNT DG
    ON A.ENTER_CD = DG.ENTER_CD
   AND A.SABUN = DG.SABUN
   AND A.YMD = DG.YMD
),

YESTERDAY_HM AS (
  SELECT
    A.ENTER_CD,
    A.SABUN,
    A.YMD,
    A.DAY_NM,
    A.WORK_YN AS HOL_YN,
    A.WORK_ORG_NM,
    NVL(A.WORK_MIN,0) AS WORK_MIN,
    A.ACT_OUT_HM,
    NVL(DG.REQUEST_USE_TYPE, '-') AS REQUEST_USE_TYPE,
    NVL(DG.GNT_LIST, '') AS GNT_CD,
    CASE
      WHEN DG.GNT_LIST = '88' THEN A.WORK_SHM
      WHEN A.TIME_CD IS NULL THEN '-'
      WHEN A.WORK_YN = 'N' THEN CASE WHEN DG.REQUEST_USE_TYPE = 'AM' THEN A.HALF_HOLIDAY1 ELSE A.WORK_SHM END
      WHEN A.WORK_YN = 'Y' AND A.SHM IS NOT NULL AND A.EHM IS NOT NULL THEN A.SHM
      ELSE '-'
    END AS WORK_SHM,
    CASE
      WHEN DG.GNT_LIST = '88' THEN A.WORK_EHM
      WHEN A.TIME_CD IS NULL THEN '-'
      WHEN A.WORK_YN = 'N' THEN CASE WHEN DG.REQUEST_USE_TYPE = 'PM' THEN NVL(A.HALF_HOLIDAY1, A.WORK_EHM) ELSE A.WORK_EHM END
      WHEN A.WORK_YN = 'Y' AND A.SHM IS NOT NULL AND A.EHM IS NOT NULL THEN A.EHM
      ELSE '-'
    END AS WORK_EHM
  FROM (
    --SELECT ... -- 사용자 제공 내용 생략된 부분을 그대로 삽입
SELECT A1.ENTER_CD,A1.SABUN,A1.NAME,A2.DAY_NM,B.SDATE,C.ORG_CD,C.WORK_ORG_NM,C.WORK_ORG_CD
,A2.SUN_DATE AS YMD
FROM THRM100 A1, THRM151 B, TSYS007 A2, TTIM111_V C
WHERE 1 = 1
AND A1.ENTER_CD = C.ENTER_CD (+)
AND A1.SABUN    = C.SABUN (+)
AND A2.SUN_DATE BETWEEN C.SDATE AND NVL(C.EDATE, '99991231')
AND A2.SUN_DATE BETWEEN TO_CHAR((TO_DATE(REPLACE(TRIM('2025-05-01'), '-', ''),'YYYYMMDD')-1),'YYYYMMDD') AND REPLACE(TRIM('2025-05-07'), '-', '')
AND A1.ENTER_CD = 'KS'
AND A1.ENTER_CD = B.ENTER_CD
AND A1.SABUN = B.SABUN
                                                        AND B.SDATE = ( SELECT MAX(BB.SDATE)
FROM THRM151 BB
WHERE BB.ENTER_CD = B.ENTER_CD
AND BB.SABUN    = B.SABUN
AND A2.SUN_DATE BETWEEN BB.SDATE AND NVL(BB.EDATE, '99991231') )
  ) A
  LEFT JOIN DAY_GNT DG
    ON A.ENTER_CD = DG.ENTER_CD
   AND A.SABUN = DG.SABUN
   AND A.YMD = DG.YMD
)

-- 메인 SELECT 절 이하 유지
--SELECT ... FROM TODAY_HM A JOIN YESTERDAY_HM B ... -- 이하 기존 쿼리 유지
SELECT X.ENTER_CD,X.SABUN,X.WORK_ORG_NM,X.ORG_NM,X.NAME,X.ACT_IN_HM,X.ACT_OUT_HM,X.TODAY_YMD,X.WORK_SHM,X.PAY_YM,X.CHECK_YN,X.OVER_TIME,X.ORG_CD,X.WORK_ORG_CD
,X.TODAY_YMD AS YMD
,X.YESTERDAY_YMD,X.WORK_EHM AS OUT_HM
,X.PAY_TIME AS CAL_TIME
,CASE WHEN X.OVERTIME_YN = 'Y' THEN NVL(X.PAY_TIME_YN,CASE WHEN X.PAY_TIME + X.PAY_TIME_OVER > 600
             --THEN X.PAY_TIME + X.PAY_TIME_OVER - 600
             THEN 600 - X.PAY_TIME
             ELSE X.PAY_TIME_OVER END)
ELSE NVL(X.PAY_TIME_YN,600-X.PAY_TIME)
END AS PAY_TIME
,CASE WHEN X.OVERTIME_YN = 'Y' THEN NVL(X.PAY_MON, (CASE WHEN X.PAY_TIME + X.PAY_TIME_OVER > 600
    --THEN        X.PAY_TIME + X.PAY_TIME_OVER - 600
    THEN 600 - X.PAY_TIME
    ELSE X.PAY_TIME_OVER END
) * 250)
ELSE NVL(X.PAY_MON,(600-X.PAY_TIME)* 250)
END AS PAY_MON --분당250원
,X.OVERTIME_YN
FROM(
SELECT A.ENTER_CD
,A.SABUN
,B.YMD AS YESTERDAY_YMD
,B.WORK_EHM
,B.OVER_TIME
,A.YMD AS TODAY_YMD
,CASE WHEN A.WORK_MIN IS NULL THEN A.WORK_SHM
ELSE TO_CHAR(TO_DATE(A.WORK_SHM,'HH24MI') + A.WORK_MIN/(24*60),'HH24MI') END AS WORK_SHM
,A.WORK_ORG_NM
,A.ORG_CD
,A.WORK_ORG_CD
,F_COM_GET_ORG_NM(A.ENTER_CD,A.ORG_CD,A.YMD) AS ORG_NM
,F_COM_GET_NAMES(A.ENTER_CD,A.SABUN) AS NAME
,A.WORK_MIN AS LATE_MIN, B.WORK_MIN AS EARLY_MIN
,(TO_DATE(A.YMD||CASE WHEN A.WORK_MIN IS NULL THEN A.WORK_SHM --지각 있을 시 시간 더하기
ELSE TO_CHAR(TO_DATE(A.WORK_SHM,'HH24MI') + A.WORK_MIN/(24*60),'HH24MI') END
,'YYYYMMDDHH24MI')
- TO_DATE(CASE WHEN NVL(B.OVER_TIME,B.WORK_EHM) <= B.WORK_SHM THEN TO_CHAR(TO_DATE(B.YMD,'YYYYMMDD')+1,'YYYYMMDD') ELSE B.YMD END
||CASE WHEN B.WORK_MIN IS NULL THEN NVL(B.OVER_TIME,B.WORK_EHM) --조퇴 있을 시 시간 빼기
ELSE TO_CHAR(TO_DATE(NVL(B.OVER_TIME,B.WORK_EHM),'HH24MI') - B.WORK_MIN/(24*60),'HH24MI') END
,'YYYYMMDDHH24MI')
) *24*60 AS PAY_TIME
,D.PAY_TIME AS PAY_TIME_YN
,D.PAY_MON
,D.PAY_YM
,D.CHECK_YN
,A.ACT_IN_HM
,B.ACT_OUT_HM
,NVL(Z.OVERTIME_YN,'O') AS OVERTIME_YN
,CASE WHEN B.OVER_TIME IS NOT NULL THEN
(TO_DATE(B.OVER_TIME,'HH24MI') - B.WORK_MIN/(24*60) - TO_DATE(B.WORK_EHM,'HH24MI')
) *24*60
ELSE 0 END AS PAY_TIME_OVER
FROM TODAY_HM A, YESTERDAY_HM B, TBEN841 D, TBEN840 Z
WHERE 1 = 1
AND A.ENTER_CD = B.ENTER_CD
AND A.SABUN = B.SABUN
AND TO_CHAR(TO_DATE(A.YMD,'YYYYMMDD') - 1,'YYYYMMDD') = B.YMD
AND A.WORK_SHM != '-'
AND B.WORK_EHM != '-'
AND A.WORK_SHM != A.WORK_EHM_TODAY
AND A.ENTER_CD = D.ENTER_CD(+)
AND A.SABUN = D.SABUN(+)
AND A.YMD = D.YMD(+)
--기준관리 추가
AND A.ENTER_CD = Z.ENTER_CD(+)
AND A.ORG_CD = Z.ORG_CD(+)
AND A.WORK_ORG_CD = Z.WORK_ORG_CD(+)
AND A.YMD BETWEEN Z.SDATE(+) AND Z.EDATE(+)
AND D.PAY_YM(+) = REPLACE(TRIM('2025-04'), '-', '')
) X
WHERE 1 = 1
AND X.OVERTIME_YN != 'N'
AND 0 < CASE WHEN X.OVERTIME_YN = 'Y' THEN X.PAY_TIME_OVER
ELSE 1 END
AND NVL(X.PAY_TIME,'9999') < 600 AND NVL(X.PAY_TIME,'9999') > 0
ORDER BY X.SABUN,X.TODAY_YMD;
